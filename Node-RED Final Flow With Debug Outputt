[
    {
        "id": "70f1a9f67935adf1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2f91b99f9cb71afb",
        "type": "serial in",
        "z": "70f1a9f67935adf1",
        "name": "BU-353S4 GPS",
        "serial": "c0d895efde3a1686",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "00d3a24783c9f341",
                "7c98e0b68b1264d9"
            ]
        ]
    },
    {
        "id": "d5f83185f7263692",
        "type": "serial in",
        "z": "70f1a9f67935adf1",
        "name": "CPX",
        "serial": "1ea791a3425ff427",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "68703ca90c4648a9"
            ]
        ]
    },
    {
        "id": "7c98e0b68b1264d9",
        "type": "function",
        "z": "70f1a9f67935adf1",
        "name": "GPRMC Data Parser",
        "func": "// main function to process GPS data\nvar time = new Date().toISOString();\n\nif (msg.payload.toString().startsWith('$GPRMC')) {\n    // extract the speed and course data from the GPRMC sentence\n    var data = msg.payload.toString().split(',');\n    var speedKnots = parseFloat(data[7]); // in knots\n    var speedMph = speedKnots * 1.15078; // convert to mph\n    var course = parseFloat(data[8]); // in degrees\n\n    // parse latitude\n    var latDeg = parseFloat(data[3].substring(0, 2));\n    var latMin = parseFloat(data[3].substring(2));\n    var lat = latDeg + latMin / 60.0;\n    if (data[4] == 'S') { // check for negative latitude\n        lat *= -1;\n    }\n\n    // parse longitude\n    var lonDeg = parseFloat(data[5].substring(0, 3));\n    var lonMin = parseFloat(data[5].substring(3));\n    var lon = lonDeg + lonMin / 60.0;\n    if (data[6] == 'W') { // check for negative longitude\n        lon *= -1;\n    }\n\n    //combining for losant\n    var loc = lat + \", \" + lon;\n\n    //getting acceleration\n    var acceleration = msg.payload.Acceleration\n\n    // create a new message object with the speed, course, and acceleration data in JSON format\n    msg.payload = {\n        \"data\": {\n            \"User\": \"Sam\",\n            \"Location\": loc,\n            \"Speed\": speedMph,\n            \"Course\": course,\n            \"Time\": time,\n        }\n    };\n\n    // send the message to the dashboard\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "8605df8dbe87ac73"
            ]
        ]
    },
    {
        "id": "d0321a8436e7ce54",
        "type": "debug",
        "z": "70f1a9f67935adf1",
        "name": "msg.payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 180,
        "wires": []
    },
    {
        "id": "0756de2bdce1f4e2",
        "type": "debug",
        "z": "70f1a9f67935adf1",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 300,
        "wires": []
    },
    {
        "id": "68703ca90c4648a9",
        "type": "function",
        "z": "70f1a9f67935adf1",
        "name": "Acceleration",
        "func": "var acceleration = msg.payload;\nvar time = new Date().toISOString();\n\nmsg.payload = {\n    \"data\" :{\n        \"Acceleration\": acceleration,\n        \"Time\": time,\n    }\n}\nmsg.complete = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 260,
        "wires": [
            [
                "1b2b76d50325271b"
            ]
        ]
    },
    {
        "id": "8605df8dbe87ac73",
        "type": "delay",
        "z": "70f1a9f67935adf1",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 530,
        "y": 180,
        "wires": [
            [
                "d0321a8436e7ce54",
                "dbc338ea1464ce27"
            ]
        ]
    },
    {
        "id": "1b2b76d50325271b",
        "type": "delay",
        "z": "70f1a9f67935adf1",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "0756de2bdce1f4e2",
                "dbc338ea1464ce27"
            ]
        ]
    },
    {
        "id": "00d3a24783c9f341",
        "type": "function",
        "z": "70f1a9f67935adf1",
        "name": "Last Location",
        "func": "// main function to process GPS data and stall it\nvar time = new Date().toISOString();\n\nif (msg.payload.toString().startsWith('$GPRMC')) {\n    // extract the speed and course data from the GPRMC sentence\n    var data = msg.payload.toString().split(',');\n    \n    // parse latitude\n    var latDeg = parseFloat(data[3].substring(0, 2));\n    var latMin = parseFloat(data[3].substring(2));\n    var lat = latDeg + latMin / 60.0;\n    if (data[4] == 'S') { // check for negative latitude\n        lat *= -1;\n    }\n\n    // parse longitude\n    var lonDeg = parseFloat(data[5].substring(0, 3));\n    var lonMin = parseFloat(data[5].substring(3));\n    var lon = lonDeg + lonMin / 60.0;\n    if (data[6] == 'W') { // check for negative longitude\n        lon *= -1;\n    }\n\n    //combining for losant\n    var loc = lat + \", \" + lon;\n\n    // create a new message object with the speed, course, and acceleration data in JSON format\n    msg.payload = {\n        \"data\": {\n            \"LLocation\": loc,\n            \"Time\": time,\n        }\n    };\n\n    // send the message to the dashboard\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "01024bfbde839a9c"
            ]
        ]
    },
    {
        "id": "01024bfbde839a9c",
        "type": "delay",
        "z": "70f1a9f67935adf1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "6",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 120,
        "wires": [
            [
                "4611925f23dd5e1a"
            ]
        ]
    },
    {
        "id": "4611925f23dd5e1a",
        "type": "delay",
        "z": "70f1a9f67935adf1",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "dbc338ea1464ce27"
            ]
        ]
    },
    {
        "id": "dbc338ea1464ce27",
        "type": "debug",
        "z": "70f1a9f67935adf1",
        "name": "Losant MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "62b8ec5f487dce36",
        "type": "ui_spacer",
        "z": "70f1a9f67935adf1",
        "name": "spacer",
        "group": "de84bf66e7fdf8cb",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "c0d895efde3a1686",
        "type": "serial-port",
        "serialport": "COM3",
        "serialbaud": "4800",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "1ea791a3425ff427",
        "type": "serial-port",
        "serialport": "COM5",
        "serialbaud": "4800",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "de84bf66e7fdf8cb",
        "type": "ui_group",
        "name": "Text Data",
        "tab": "4e964b6de828344e",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4e964b6de828344e",
        "type": "ui_tab",
        "name": "GPS",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
